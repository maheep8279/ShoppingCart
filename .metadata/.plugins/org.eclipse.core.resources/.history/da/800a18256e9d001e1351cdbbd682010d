package com.caseStudy.controller;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.caseStudy.model.BookStore;
import com.caseStudy.model.Cart;
import com.caseStudy.model.Traking;
import com.caseStudy.service.CartService;

@RestController
public class CartController {

	@Autowired
	CartService cartService;

	@Autowired
	RestTemplate restTemplate;

	@GetMapping("/getCartList")
	public List<Cart> getCartList() {
		return cartService.getAll();
	}

	@GetMapping("/getCartId/{id}")
	public Cart getCartId(@PathVariable("id") int id) {
		return cartService.getByCartId(id);
	}

	@PostMapping("/createCart/{cartId}/{bookId}/{quantity}")
	public Cart createCart(@PathVariable("cartId") int cartId, @PathVariable("bookId") int bookId,
			@PathVariable("quantity") int quantity) {

		Cart cart = cartService.getByCartId(cartId);
		Cart cart2 = new Cart();

		Traking avaliableQuantity = restTemplate.getForObject("http://localhost:8085/getAvaliableBooks/" + bookId,
				Traking.class);

		if (avaliableQuantity.getBooksAvaliability() < quantity) {
			return cart2;
		} else if (cart == null) {
			BookStore bookStore = restTemplate.getForObject("http://localhost:8081/getBookById/" + bookId,
					BookStore.class);
			bookStore.setQuantity(quantity);

			double updatePrice = bookStore.getBookPrice() * quantity;
			bookStore.setBookPrice(updatePrice);

			List<BookStore> bookStores = new ArrayList<>();

			bookStores.add(bookStore);
			cart2.setCartId(cartId);
			cart2.setBookStores(bookStores);
			cart2.setTotal(updatePrice);
			return cartService.addBookIntoCart(cart2);
		}

		else {

			cart2 = updateBookQuantity(cartId, bookId, quantity);
			if (cart2.getCartId() == 0) {
				cart2 = addNewBook(cartId, bookId, quantity);
			}
			return cart2;

		}

	}

	@PutMapping("/updateBookQuantity/{cartId}/{bookId}/{quantity}")
	public Cart updateBookQuantity(@PathVariable("cartId") int cartId, @PathVariable("bookId") int bookId,
			@PathVariable("quantity") int quantity) {

		Cart cart = cartService.getByCartId(cartId);

		int avaliableQuantity = restTemplate.getForObject("http://localhost:8085/getAvaliableBooks/" + bookId,
				Integer.class);
		if (avaliableQuantity < quantity) {

			return cart;
		}

		BookStore bookStore = restTemplate.getForObject("http://localhost:8081/getBookById/" + bookId, BookStore.class);

		for (BookStore bookStore2 : cart.getBookStores()) {
			if (bookStore2.getBookId() == bookId) {
				cart.setTotal(((quantity - bookStore2.getQuantity()) * bookStore.getBookPrice()) + cart.getTotal());
				bookStore2.setQuantity(quantity);
				bookStore2.setBookPrice(bookStore2.getQuantity() * bookStore.bookPrice);
				return cartService.updateCart(cart);
			}
		}
		return new Cart();

	}

	@PutMapping("/addNewBook/{cartId}/{bookId}/{quantity}")
	public Cart addNewBook(@PathVariable("cartId") int cartId, @PathVariable("bookId") int bookId,
			@PathVariable("quantity") int quantity) {

		Cart cart = cartService.getByCartId(cartId);
		int avaliableQuantity = restTemplate.getForObject("http://localhost:8085/getAvaliableBooks/" + bookId,
				Integer.class);
		if (avaliableQuantity < quantity) {

			return cart;
		}

		BookStore bookStores = restTemplate.getForObject("http://localhost:8081/getBookById/" + bookId,
				BookStore.class);
		if (cart.getBookStores().stream().noneMatch(p -> p.getBookId() == bookId)) {
			bookStores.setQuantity(quantity);
			bookStores.setBookPrice(bookStores.getBookPrice() * quantity);
			cart.getBookStores().add(bookStores);
			cart.setTotal((bookStores.getBookPrice() * quantity) + cart.getTotal());
			return cartService.updateCart(cart);
		}
		return new Cart();

	}

	@DeleteMapping("/remove/{cartId}/{bookId}")
	public String remove(int cartId, int bookId) {
		Cart cart = cartService.getByCartId(cartId);

		for (BookStore bookStore : cart.getBookStores()) {

			if (bookStore.getBookId() == bookId) {

				cart.setTotal(cart.getTotal() - bookStore.getBookPrice());

				cart.getBookStores().remove(cart.getBookStores().indexOf(bookStore));

				cartService.updateCart(cart);
			}

		}
		return "deleted";

	}

}
